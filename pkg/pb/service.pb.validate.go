// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: github.com/my-app/pkg/pb/service.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on VersionResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *VersionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Version

	return nil
}

// VersionResponseValidationError is the validation error returned by
// VersionResponse.Validate if the designated constraints aren't met.
type VersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionResponseValidationError) ErrorName() string { return "VersionResponseValidationError" }

// Error satisfies the builtin error interface
func (e VersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionResponseValidationError{}

// Validate checks the field values on UpdateDescriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateDescriptionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Description

	// no validation rules for Service

	return nil
}

// UpdateDescriptionRequestValidationError is the validation error returned by
// UpdateDescriptionRequest.Validate if the designated constraints aren't met.
type UpdateDescriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDescriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDescriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDescriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDescriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDescriptionRequestValidationError) ErrorName() string {
	return "UpdateDescriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDescriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDescriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDescriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDescriptionRequestValidationError{}

// Validate checks the field values on UpdateDescriptionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateDescriptionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Description

	return nil
}

// UpdateDescriptionResponseValidationError is the validation error returned by
// UpdateDescriptionResponse.Validate if the designated constraints aren't met.
type UpdateDescriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDescriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDescriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDescriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDescriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDescriptionResponseValidationError) ErrorName() string {
	return "UpdateDescriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDescriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDescriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDescriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDescriptionResponseValidationError{}

// Validate checks the field values on GetDescriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDescriptionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Service

	return nil
}

// GetDescriptionRequestValidationError is the validation error returned by
// GetDescriptionRequest.Validate if the designated constraints aren't met.
type GetDescriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDescriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDescriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDescriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDescriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDescriptionRequestValidationError) ErrorName() string {
	return "GetDescriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDescriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDescriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDescriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDescriptionRequestValidationError{}

// Validate checks the field values on GetDescriptionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDescriptionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Description

	return nil
}

// GetDescriptionResponseValidationError is the validation error returned by
// GetDescriptionResponse.Validate if the designated constraints aren't met.
type GetDescriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDescriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDescriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDescriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDescriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDescriptionResponseValidationError) ErrorName() string {
	return "GetDescriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDescriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDescriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDescriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDescriptionResponseValidationError{}

// Validate checks the field values on GetUptimeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetUptimeRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Service

	return nil
}

// GetUptimeRequestValidationError is the validation error returned by
// GetUptimeRequest.Validate if the designated constraints aren't met.
type GetUptimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUptimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUptimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUptimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUptimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUptimeRequestValidationError) ErrorName() string { return "GetUptimeRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUptimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUptimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUptimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUptimeRequestValidationError{}

// Validate checks the field values on GetUptimeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetUptimeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uptime

	return nil
}

// GetUptimeResponseValidationError is the validation error returned by
// GetUptimeResponse.Validate if the designated constraints aren't met.
type GetUptimeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUptimeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUptimeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUptimeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUptimeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUptimeResponseValidationError) ErrorName() string {
	return "GetUptimeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUptimeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUptimeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUptimeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUptimeResponseValidationError{}

// Validate checks the field values on GetRequestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRequestsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Service

	return nil
}

// GetRequestsRequestValidationError is the validation error returned by
// GetRequestsRequest.Validate if the designated constraints aren't met.
type GetRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestsRequestValidationError) ErrorName() string {
	return "GetRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestsRequestValidationError{}

// Validate checks the field values on GetRequestsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRequestsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Requests

	return nil
}

// GetRequestsResponseValidationError is the validation error returned by
// GetRequestsResponse.Validate if the designated constraints aren't met.
type GetRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestsResponseValidationError) ErrorName() string {
	return "GetRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestsResponseValidationError{}
